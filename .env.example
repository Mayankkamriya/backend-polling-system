# ===================================
# REAL-TIME POLLING API CONFIGURATION
# ===================================
# Copy this file to .env and update with your values

# ===================================
# DATABASE CONFIGURATION
# ===================================
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database?schema=public
DATABASE_URL="postgresql://polling_user:polling_password@localhost:5432/polling_db?schema=public"

# Alternative configurations for different environments:
# For Docker: postgresql://polling_user:polling_password@postgres:5432/polling_db?schema=public
# For Cloud (example): postgresql://user:pass@host:5432/db?sslmode=require

# ===================================
# JWT AUTHENTICATION CONFIGURATION
# ===================================
# Secret for signing access tokens (REQUIRED - generate a strong secret)
JWT_SECRET="super-secret-jwt-key-for-dev"

# Access token expiration time
# Format: number + unit (s=seconds, m=minutes, h=hours, d=days)
# Examples: "15m", "1h", "24h", "7d"
JWT_EXPIRES_IN="15m"

# Secret for signing refresh tokens (REQUIRED - generate a different strong secret)
JWT_REFRESH_SECRET="super-refresh-secret-key-for-dev"

# Refresh token expiration time
JWT_REFRESH_EXPIRES_IN="7d"

# ===================================
# SERVER CONFIGURATION
# ===================================
# Port for the API server
PORT=3000

# Host to bind the server (0.0.0.0 for all interfaces, 127.0.0.1 for localhost only)
HOST="0.0.0.0"

# Environment (development, staging, production)
NODE_ENV="development"

# ===================================
# CORS CONFIGURATION
# ===================================
# Allowed origins for CORS (comma-separated)
# For development, you might want to allow multiple origins
CORS_ORIGIN="http://localhost:3000,http://localhost:3001,http://localhost:5173"

# ===================================
# RATE LIMITING CONFIGURATION
# ===================================
# Time window for rate limiting (milliseconds)
# 900000 = 15 minutes
RATE_LIMIT_WINDOW_MS=900000

# Maximum number of requests per window
RATE_LIMIT_MAX_REQUESTS=100

# ===================================
# WEBSOCKET CONFIGURATION
# ===================================
# WebSocket configuration (optional)
# Maximum connections per user
WS_MAX_CONNECTIONS_PER_USER=5

# WebSocket heartbeat interval (milliseconds)
WS_HEARTBEAT_INTERVAL=30000

# ===================================
# LOGGING CONFIGURATION
# ===================================
# Log level (error, warn, info, debug)
LOG_LEVEL="info"

# Enable request logging (true/false)
ENABLE_REQUEST_LOGGING="true"

# ===================================
# OPTIONAL: REDIS CONFIGURATION
# ===================================
# Redis URL for session storage and caching (optional)
# Uncomment if you want to use Redis for better performance
# REDIS_URL="redis://localhost:6379"

# ===================================
# OPTIONAL: EMAIL CONFIGURATION
# ===================================
# Email service configuration (for future features like notifications)
# EMAIL_SERVICE="smtp"
# EMAIL_HOST="smtp.gmail.com"
# EMAIL_PORT=587
# EMAIL_USER="your-email@example.com"
# EMAIL_PASS="your-app-password"
# EMAIL_FROM="noreply@polling-api.com"

# ===================================
# OPTIONAL: MONITORING & ANALYTICS
# ===================================
# Application monitoring (optional)
# SENTRY_DSN="your-sentry-dsn"
# ANALYTICS_KEY="your-analytics-key"

# ===================================
# SECURITY CONFIGURATION
# ===================================
# Session secret for additional security
SESSION_SECRET="super-secret-session-key"

# Enable HTTPS redirect in production
FORCE_HTTPS="false"

# Trusted proxy settings (if behind a proxy/load balancer)
TRUST_PROXY="false"

# ===================================
# DEVELOPMENT CONFIGURATION
# ===================================
# Enable API documentation in development
ENABLE_API_DOCS="true"

# Enable detailed error responses in development
ENABLE_DETAILED_ERRORS="true"

# ===================================
# PRODUCTION CONFIGURATION
# ===================================
# For production deployment, make sure to:
# 1. Generate strong, unique JWT secrets
# 2. Use a secure database connection with SSL
# 3. Set NODE_ENV to "production"
# 4. Configure proper CORS origins
# 5. Set up monitoring and logging
# 6. Use environment-specific secrets management

# Example production values:
# NODE_ENV="production"
# JWT_SECRET="your-256-bit-secret-generated-securely"
# JWT_REFRESH_SECRET="your-different-256-bit-secret"
# DATABASE_URL="postgresql://user:pass@prod-host:5432/db?sslmode=require"
# CORS_ORIGIN="https://your-frontend-domain.com"
# FORCE_HTTPS="true"
# TRUST_PROXY="true"

# ===================================
# GENERATE SECRETS
# ===================================
# To generate secure secrets, run:
# node -e "console.log('JWT_SECRET=' + require('crypto').randomBytes(64).toString('hex'))"
# node -e "console.log('JWT_REFRESH_SECRET=' + require('crypto').randomBytes(64).toString('hex'))"
# ===================================
