version: '3.8'

services:
  # Application service (Production)
  app:
    build:
      context: .
      target: production
    container_name: polling_api_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://polling_user:polling_password@postgres:5432/polling_db
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - REDIS_URL=redis://redis:6379
    networks:
      - polling_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: polling_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: polling_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-polling_password}
      POSTGRES_DB: polling_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - polling_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U polling_user -d polling_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: polling_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - polling_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: polling_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/ssl/certs:ro
    networks:
      - polling_network
    depends_on:
      app:
        condition: service_healthy
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  polling_network:
    driver: bridge