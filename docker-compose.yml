version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      target: development
    container_name: polling_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://polling_user:polling_password@postgres:5432/polling_db
      - JWT_SECRET=your-super-secure-jwt-secret-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secure-refresh-secret-key
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - polling_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  postgres:
    image: postgres:15-alpine
    container_name: polling_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: polling_user
      POSTGRES_PASSWORD: polling_password
      POSTGRES_DB: polling_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - polling_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U polling_user -d polling_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: polling_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - polling_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: polling_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@polling.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - polling_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  polling_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
